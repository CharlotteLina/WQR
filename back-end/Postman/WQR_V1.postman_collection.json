{
	"info": {
		"_postman_id": "baf0941d-6f73-4f67-baa8-afb636fb680b",
		"name": "WQR_V1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26779926",
		"_collection_link": "https://bold-station-224704.postman.co/workspace/WQR~29eaf83b-59e8-41d8-871f-c3ed891b9125/collection/26779926-baf0941d-6f73-4f67-baa8-afb636fb680b?action=share&source=collection_link&creator=26779926"
	},
	"item": [
		{
			"name": "BUILD",
			"item": [
				{
					"name": "BUILD",
					"item": [
						{
							"name": "builds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/build",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/build/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/build/type",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build",
										"type"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build by jenkins and type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/build/jenkins/1920/MAVEN",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build",
										"jenkins",
										"1920",
										"MAVEN"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create build",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jenkinsUser\":{\"id\":1},\r\n    \"buildProduct\":{\"id\":2},\r\n    \"startDate\": \"2023-07-06T17:53:47\", \r\n    \"buildType\": \"MAVEN\", \r\n    \"status\":\"PENDING\",\r\n    \"jenkinsNumber\":\"0009\",\r\n    \"repository\":{\"id\":3},\r\n    \"branch\":{\"id\":1},\r\n    \"resultBuild\": \"SUCCESS\",\r\n    \"resultTU\": \"SUCCESS\",\r\n    \"resultSonar\": \"SUCCESS\",\r\n    \"causeBuild\":\"N/A\",\r\n    \"causeSonar\":\"N/A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/build",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update build",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resultSonar\":\"FAILURE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/build/4",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"build",
										"4"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| jenkinsUser | Lien vers l'objet JenkinsUser | 1 |\n| buildProduct | Lien vers l'objet BuildProduct | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| buildType | \\[MAVEN,GRADLE\\] | MAVEN |\n| status | String | PENDING |\n| jenkinsNumber | String | 0001 |\n| repository | Lien vers l'objet GitRepository | 1 |\n| branch | Lien vers l'objet GitBranch | 1 |\n| rebuildFrom | Lien vers l'objet Build | 1 |\n| resultatBuild | String | SUCCESS |\n| resultatTU | String | SUCCESS |\n| resultSonar | String | SUCCESS |\n| causeBuild | String | N/A |\n| causeSonar | String | N/A |"
				},
				{
					"name": "BUILD PRODUCT",
					"item": [
						{
							"name": "builds products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/buildProduct",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/buildProduct/744",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"744"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/buildProduct/type",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"type"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product type Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://wqr.sics/backend/production/buildProduct/type",
									"protocol": "https",
									"host": [
										"wqr",
										"sics"
									],
									"path": [
										"backend",
										"production",
										"buildProduct",
										"type"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product model product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/buildProduct/model",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"model"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product by jenkins and name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/buildProduct/jenkins/cha_build-project/305",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"jenkins",
										"cha_build-project",
										"305"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build product by version and product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/buildProduct/TACTICAL/130.11.1-tactical-130-develop-SNAPSHOT",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"TACTICAL",
										"130.11.1-tactical-130-develop-SNAPSHOT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create build product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jenkinsUser\":{\"id\":1},\r\n    \"startDate\": \"2023-07-06T17:53:47\", \r\n    \"name\": \"build-test\", \r\n    \"jenkinsNumber\":\"0009\",\r\n    \"result\": \"SUCCESS\",\r\n    \"status\":\"PENDING\",\r\n    \"typeProduct\": \"PROJECT\", \r\n    \"branch\":{\"id\":1},\r\n    \"version\": \"version-de-test\",\r\n    \"product\":\"SICS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/buildProduct",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update build",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"rebuildFrom\":{\"id\":3}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/buildProduct/4",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildProduct",
										"4"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| jenkinsUser | Lien vers l'objet JenkinsUser | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| name | String | build-sics |\n| result | String | SUCCESS |\n| status | String | PENDING |\n| jenkinsNumber | String | 0001 |\n| typeProduct | \\[COMPONENT,LIBRARY,PROJECT\\] | PROJECT |\n| branch | Lien vers l'objet GitBranch | 1 |\n| rebuildFrom | Lien vers l'objet BuildProduct | 1 |\n| buildProductParent | Lien vers l'objet BuildProduct | 2 |\n| version | String | 1.3-B123 |\n| product | \\[SICS,SICSA,SICST,SICSD,COM,ANDROID,TACTICAL\\] | SICS |"
				},
				{
					"name": "BUILD UNIT TEST",
					"item": [
						{
							"name": "build unit tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/buildUnitTest",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildUnitTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read build unit test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/buildUnitTest/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildUnitTest",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create build Unit Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"build\":{\"id\":1},\r\n    \"result\": \"SUCCESS\",\r\n    \"name\":\"test-de-test\",\r\n    \"nbTestTotal\": 50, \r\n    \"nbTestOk\":50,\r\n    \"nbTestKo\": 0,\r\n    \"nbTestSkipped\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/buildUnitTest",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildUnitTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update build",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"test-rename\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/buildUnitTest/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"buildUnitTest",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| build | Lien vers l'objet Build | 1 |\n| result | String | SUCCESS |\n| name | String | test1234 |\n| nbTestTotal | Integer | 50 |\n| nbTestOk | Integer | 50 |\n| nbTestKo | Integer | 0 |\n| nbTestSkipped | Integer | 0 |"
				}
			]
		},
		{
			"name": "GIT",
			"item": [
				{
					"name": "BRANCH",
					"item": [
						{
							"name": "branchs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/gitBranch",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitBranch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/gitBranch/4",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitBranch",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read branch by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/gitBranch/name/test-branch",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitBranch",
										"name",
										"test-branch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"TEST\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/gitBranch",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitBranch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"develop120\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/gitBranch/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitBranch",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| name | String | develop |"
				},
				{
					"name": "REPOSITORY",
					"item": [
						{
							"name": "repositories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/gitRepository",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitRepository"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/gitRepository/6",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitRepository",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read repository by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/gitRepository/name/repoA",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitRepository",
										"name",
										"repoA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"SICS/taipan-launcher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/gitRepository",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitRepository"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"repoABC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/gitRepository/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"gitRepository",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| name | String | develop |"
				}
			]
		},
		{
			"name": "DEPLOY",
			"item": [
				{
					"name": "DEPLOYPF",
					"item": [
						{
							"name": "deploy PF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/deployPF",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read a deploy PF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/deployPF/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read deploy PF name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/deployPF/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create deploy PF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jenkinsUser\":{\"id\":2},\r\n    \"buildProduct\":{\"id\":21},\r\n    \"startDate\": \"2024-04-18T14:24:28\", \r\n    \"result\": \"UNKNOWN\", \r\n    \"pfName\":\"AIX_SICS_PF_DEV\",\r\n    \"machines\":\"192.168.1.1,192.168.1.2,192.168.1.3,192.168.1.31,192.168.1.41,192.168.1.42,192.168.1.43,192.168.1.44,192.168.1.51,192.168.1.52,192.168.1.61,192.168.1.62,192.168.1.63,192.168.1.71,192.168.1.72,192.168.1.81,192.168.1.82,192.168.4.1,192.168.4.3,192.168.4.31,192.168.4.41,192.168.4.42,192.168.4.43,192.168.4.44,192.168.4.51,192.168.4.52,192.168.4.61,192.168.4.62,192.168.4.63,192.168.4.71,192.168.4.72,192.168.4.81\",\r\n    \"name\":\"cha_deploy-sics\",\r\n    \"jenkinsNumber\":\"77\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/deployPF",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update deploy PF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"machines\":\"1.2.3.4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/deployPF/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read deploy PF by jenkins and name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/deployPF/jenkins/cha_deploy-sics/99",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPF",
										"jenkins",
										"cha_deploy-sics",
										"99"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| jenkinsUser | Lien vers l'objet JenkinsUser | 1 |\n| buildProduct | Lien vers l'objet BuildProduct | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| result | String | SUCCESS |\n| pfName | \\[AIX_ENGIE_PF,AIX_SICS_PF_DEV,AIX_SICSD_PF_DEV\\] | AIX_ENGIE_PF |\n| machines | String | 1.2.3.4,1.0.1.1 |"
				},
				{
					"name": "DEPLOYPF DETAILS",
					"item": [
						{
							"name": "deploy PF détails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/deployPFDetail",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPFDetail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read a deploy PF detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/deployPFDetail/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPFDetail",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read deploy PF detail by jenkins and name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/deployPFDetail/jenkins/sics-platform-deploy/0001",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPFDetail",
										"jenkins",
										"sics-platform-deploy",
										"0001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create deploy PF detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jenkinsUser\":{\"id\":1},\r\n    \"deployPF\":{\"id\":182},\r\n    \"name\":\"deploy-test\",\r\n    \"startDate\": \"2023-07-06T17:53:47\", \r\n    \"result\": \"SUCCESS\", \r\n    \"cause\":\"N/A\",\r\n    \"jenkinsNumber\":\"123456789\",\r\n    \"machines\":\"1.2.3.4,1.2.3.5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/deployPFDetail",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPFDetail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update deploy PF detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"deploy-test-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/deployPFDetail/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"deployPFDetail",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| jenkinsUser | Lien vers l'objet JenkinsUser | 1 |\n| deployPF | Lien vers l'objet DeployPF | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| name | String | pims-deploy |\n| result | String | SUCCESS |\n| cause | String | N/A |\n| machines | String | 1.2.3.4,1.0.1.1 |\n| jenkinsNumber | String | 0001 |"
				}
			]
		},
		{
			"name": "USER",
			"item": [
				{
					"name": "JENKINS USER",
					"item": [
						{
							"name": "jenkins users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/jenkinsUser",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"jenkinsUser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read jenkins user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/jenkinsUser/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"jenkinsUser",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create jenkins user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"test-name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/jenkinsUser",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"jenkinsUser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jenkins user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"test-name-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/jenkinsUser/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"jenkinsUser",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| name | String | develop |"
				}
			]
		},
		{
			"name": "REPORT",
			"item": [
				{
					"name": "Read all version for a report type and a model of product",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/report/BUIL/SICS",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"report",
								"BUIL",
								"SICS"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read a report for a build product",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/report/552",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"report",
								"552"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all report type",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/report/type",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"report",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all report resume",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "report",
								"value": "BUILD",
								"type": "text",
								"disabled": true
							},
							{
								"key": "product",
								"value": "SICSA",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"report\":\"BUILD\",\r\n    \"product\":[\"SICS\",\"COM\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/report/resume?product=SICSA&report=BUILD",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"report",
								"resume"
							],
							"query": [
								{
									"key": "product",
									"value": "SICSA"
								},
								{
									"key": "report",
									"value": "BUILD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read last three weather report",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "product",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/report/lastReport",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"report",
								"lastReport"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST",
			"item": [
				{
					"name": "TEST INTEGRATION",
					"item": [
						{
							"name": "Tests integration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/testIntegration",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read a integration test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/testIntegration/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegration",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  integration test type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/production/testIntegration/type",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegration",
										"type"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  integration test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"buildProduct\":{\"id\":308},\r\n    \"jenkinsUser\":{\"id\":2},\r\n    \"startDate\": \"2024-04-19T13:31:50\", \r\n    \"type\":\"CATS\",\r\n    \"result\": \"SUCCESS\", \r\n    \"status\":\"FINISHED\",\r\n    \"scenarioName\":\"aaa/a\",\r\n    \"nbTestTotal\":30,\r\n    \"nbTestOk\":30,\r\n    \"nbTestKo\":0,\r\n    \"nbTestNa\":0,\r\n    \"nbTestWarn\":0,\r\n    \"pfName\":\"AIX_ENGIE_PF\",\r\n    \"machines\":\"192.168.0.12,192.168.0.13\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/testIntegration",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update integration test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"rebuildFrom\":{\"id\":1}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/testIntegration/4",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegration",
										"4"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| buildProduct | Lien vers l'objet BuildProduct | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| result | String | SUCCESS |\n| type | \\[CATS,STIMPACK,TU_OFUSQUE,TBN,TEST_MANUEL\\] | CATS |\n| status | String | PENDING |\n| scenarioName | String | scenarion1 |\n| nbTestTotal | Integer | 50 |\n| nbTestOk | Integer | 50 |\n| nbTestKo | Integer | 0 |\n| nbTestNa | Integer | 0 |\n| nbTestWarn | Integer | 0 |\n| rebuildFrom | Lien vers l'objet TestIntegration | 1 |"
				},
				{
					"name": "TEST INTEGRATION DETAILS",
					"item": [
						{
							"name": "Tests integration details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.satisfy(function (id) {",
											"      return id >= 0;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Acceptable range is less than 1 second",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/testIntegrationDetail",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegrationDetail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read a integration test detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'name' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/production/testIntegrationDetail/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegrationDetail",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  integration test detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"testIntegration\":{\"id\":4},\r\n    \"startDate\": \"2023-07-06T17:53:47\", \r\n    \"result\": \"SUCCESS\", \r\n    \"status\":\"PENDING\",\r\n    \"scenarioName\":\"scenarioN11\",\r\n    \"nbTestTotal\":20,\r\n    \"nbTestOk\":20,\r\n    \"nbTestKo\":0,\r\n    \"nbTestNa\":0,\r\n    \"nbTestWarn\":0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/testIntegrationDetail",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegrationDetail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update integration test detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body contains the 'id' and 'name' fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{pwd}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"details\":\"error on ---\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/production/testIntegrationDetail/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"production",
										"testIntegrationDetail",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"description": "| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| id | \\[Automatique\\] | 1 |\n| testIntegration | Lien vers l'objet TestIntegration | 1 |\n| startDate | LocalDateTime | 2023-07-06T17:53:47 |\n| endDate | LocalDateTime | 2023-07-06T19:53:47 |\n| result | String | SUCCESS |\n| status | String | PENDING |\n| scenarioName | String | scenarion1 |\n| nbTestTotal | Integer | 50 |\n| nbTestOk | Integer | 50 |\n| nbTestKo | Integer | 0 |\n| nbTestNa | Integer | 0 |\n| nbTestWarn | Integer | 0 |\n| details | String | N/A |"
				}
			]
		},
		{
			"name": "UPSOURCE",
			"item": [
				{
					"name": "Read upsouce causes",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/production/upsourceCause",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"upsourceCause"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read upsouce cause",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/production/upsourceCause/9",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"upsourceCause",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read upsouce cause type",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/production/upsourceCause/type",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"upsourceCause",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create upsources causes for one repo and one branch",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n\r\n    {\"type\":\"MISSING\",\"information\":\"testC \",\"author\":\"khalid lhasnaoui\",\"date\":\"2024-01-30T10:22:25\",\"branchId\":1,\"repositoryId\":2,\"reviewerFinish\":\"\",\"reviewerRaised\":\"\",\"reviewerNotFinish\":\"ABC\"}\r\n\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/upsourceCause",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"upsourceCause"
							]
						}
					},
					"response": []
				}
			],
			"description": "Lors de la création on va envoyé une liste de l'objet UpsourceCauseJenkins\n\n| **Name** |  | **Exemple** |\n| --- | --- | --- |\n| type | \\[MISSING,NOTCLOSED\\] | MISSING |\n| date | LocalDateTime | 2023-07-06T17:53:47 |\n| information | String | #1234 - bla bla |\n| author | String | p-nom |\n| branchId | Integer | 1 |\n| repositoryId | Integer | 1 |\n| reviewerFinish | String | a-nom b-nom |\n| reviewerRaised | String |  |\n| reviewerNotFinish | String | c-nom |\n\nQuand on récupère une upsource cause on va avoir la cause upsource avec son historique"
		},
		{
			"name": "BDD GCONF KPI",
			"item": [
				{
					"name": "Read build Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the id field in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'name' field in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/production/build",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"build"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "COMPARE",
			"item": [
				{
					"name": "Create compare report",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "product",
								"value": "SICSA",
								"type": "text",
								"disabled": true
							},
							{
								"key": "startDate",
								"value": "2024-01-01",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "2024-06-01",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/compare/SICSA/BUILD",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"compare",
								"SICSA",
								"BUILD"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read detail of a repository",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{pwd}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "product",
								"value": "SICS",
								"type": "text",
								"disabled": true
							},
							{
								"key": "startDate",
								"value": "2024-01-01",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "2024-05-31",
								"type": "text"
							},
							{
								"key": "name",
								"value": "SICS/bms/bms",
								"type": "text"
							},
							{
								"key": "buildProducts",
								"value": "208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,246,247,248,249,250,251,252,253,255,256,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,277,281,289,291,294,296,299,301,302,304,306,309,310,313,316,322,323,326,328,331,334,336,337,338,340,343,346,347,350,352,353,354,355,359,360,364,365,366,370,371,372,376,377,381,382,383,387,388,390,391,392,396,397,399,400,403,404,405,408,409,412,413,416,417,420,421,422,425,426,427,430,431,432,434,435,437,438,440,441,442,445,447,448,450,451,452,476,479,485,489,496,498,499,505,533,539,541,544,554,555,561,563,566,573,579,581,584,600,606,608,611,622,624,627,628,634,636,639,649,655,657,660,678,684,686,689,703,709",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/production/compare/repository",
							"host": [
								"{{url}}"
							],
							"path": [
								"production",
								"compare",
								"repository"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the status field in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'db' component in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.components).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.components.db).to.exist.and.to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{pwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/actuator/health",
					"host": [
						"{{url}}"
					],
					"path": [
						"actuator",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Mappings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the status field in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'db' component in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.components).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.components.db).to.exist.and.to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{pwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/actuator/mappings",
					"host": [
						"{{url}}"
					],
					"path": [
						"actuator",
						"mappings"
					]
				}
			},
			"response": []
		}
	]
}